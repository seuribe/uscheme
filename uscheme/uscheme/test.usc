(define add1 (lambda (x) (+ x 1)))
(define sub1 (lambda (x) (- x 1)))
(define name "Sebastian")
(define results '())

(define (test proc args)
	(set! results (cons (apply proc args) results)))

(define (null? l)
	(= 0 (length l)))

(define (member m l)
	(if (null? l) #f
		(if (equal? (car l) m) l
			(member m (cdr l)))))

(define passed (not (member #f results)))
(print (string-append "test results: " (if passed "passed" "failed")))


(test = '(1 2))
(test = '(1 1))
(test = '(2 2))
(print (foldl + 0 '(1 2 3 4)))